<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- The singleton hibernate session factory -->
	<bean id="sessionFactory" scope="singleton"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>

	<!-- Spring's hibernate transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- So classes/functions with @Transactional get a hibernate txn -->
	<tx:annotation-driven />

	<!-- Inject my business services class to the actions -->
	<bean id="services" class="org.cs300.auctionhouse.services.Services"
		scope="singleton">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="1000000" />
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<!-- NOTE: it is important to specify the order property, so this adapter 
			will be attempted before the HandlerAdapter that Spring MVC automatically 
			configures. This is because a MappingJacksonHttpMessageConverter is registered 
			automatically with the default adapter that will attempt to handle any Java 
			object including BufferedImage. -->
		<property name="order" value="1" />
		<property name="messageConverters">
			<list>
				<!-- Default converters -->
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" />
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>image/jpeg</value>
						</list>
					</property>
				</bean>
				<bean
					class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />

				<!-- Converter for images -->
				<bean
					class="org.springframework.http.converter.BufferedImageHttpMessageConverter" />
			</list>
		</property>
	</bean>
</beans>
